package com.sobngwi.entities;

import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.h2.engine.Database;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.sobngwi.aspect.LoggingAspect;
import com.sobngwi.dao.AccountRowMapper;

@Configuration
@EnableTransactionManagement
@PropertySource("classpath:prod.properties")
@ComponentScan({"com.sobngwi.dao"})
public class InfrastructureConfig {

	@Autowired
	private Environment env;

	@Bean
	public LoggingAspect loggingAspect() {
		return new LoggingAspect() ;
	}
	
	@Bean ( name = "transactionManager")
	public PlatformTransactionManager transactionManagerForTest(){
		return new DataSourceTransactionManager(datasourceForTest());
	}
	
	@Bean ( name = "transactionManager")
	public PlatformTransactionManager transactionManagerForProd(){
		return new DataSourceTransactionManager(datasourceForprod());
	}
	
	@Bean
	@Profile("test")
	public DataSource datasourceForTest(){
		return new EmbeddedDatabaseBuilder()
				   .generateUniqueName(true)
				   .setType(EmbeddedDatabaseType.H2)
				   .setScriptEncoding("UTF-8")
				   .addScript("schema.sql")
				   .addScripts("data.sql")
				   .build();
	}
	
	@Bean
	@Profile("prod")
	public DataSource datasourceForprod(){
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName(env.getProperty("db.driver"));
		dataSource.setUrl(env.getProperty("db.url"));
		dataSource.setUsername(env.getProperty("db.user"));
		dataSource.setPassword(env.getProperty("db.pass"));
		
		return dataSource;
	}
	
	@Bean
	public AccountRowMapper accountRowMapper(){
		return new AccountRowMapper();
	}
	
	// ORM .
	@Bean JpaVendorAdapter jpaVendorAdapter() {
		HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter() ;
		adapter.setShowSql(true);
		adapter.setGenerateDdl(true);
		adapter.setDatabase(org.springframework.orm.jpa.vendor.Database.H2);
		adapter.setDatabasePlatform("org.hibernate.dialect.H2Dialect");
		return adapter;
	}
	
	@Bean LocalContainerEntityManagerFactoryBean entityManagerFactory( DataSource dataSource, JpaVendorAdapter jpaVendorAdapter ){
		Properties props = new Properties();
		props.setProperty("hibernate.format.sql", String.valueOf(true));
		LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
		emf.setDataSource(dataSource);
		emf.setPackagesToScan("com.sobngwi.entitie");
		emf.setJpaVendorAdapter(jpaVendorAdapter);
		emf.setJpaProperties(props);
		return emf;
	}
	
	@Bean
	public PlatformTransactionManager transactionManager( EntityManagerFactory emf){
		return new JpaTransactionManager(emf);
	}
	
	@Bean // Translate persistence exception
	public BeanPostProcessor persistenceTranslation(){
		return new PersistenceExceptionTranslationPostProcessor();
	}

}
