package com.sobngwi.configuration;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Profile;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.sobngwi.repository.AccountRowMapper;

@Configuration
@EnableTransactionManagement
@PropertySource("classpath:prod.properties")
@ComponentScan({"com.sobngwi.repositoryjdbc.impl"})
public class InfrastructureConfigJdbc {

	@Autowired
	private Environment env;


	
	@Bean ( name = "transactionManager")
	public PlatformTransactionManager transactionManagerForTest(){
		return new DataSourceTransactionManager(datasourceForTest());
	}
	
	@Bean ( name = "transactionManager")
	public PlatformTransactionManager transactionManagerForProd(){
		return new DataSourceTransactionManager(datasourceForprod());
	}
	
	@Profile("jdbc-prod")
	public DataSource datasourceForprod(){
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName(env.getProperty("db.driver"));
		dataSource.setUrl(env.getProperty("db.url"));
		dataSource.setUsername(env.getProperty("db.user"));
		dataSource.setPassword(env.getProperty("db.pass"));
		
		return dataSource;
	}
	
	@Profile("jdbc-test")
	public DataSource datasourceForTest(){
		return new EmbeddedDatabaseBuilder()
				   .generateUniqueName(true)
				   .setType(EmbeddedDatabaseType.H2)
				   .setScriptEncoding("UTF-8")
				   .addScript("schema.sql")
				   .addScripts("data.sql")
				   .build();
	}
	

	
	
	
	@Bean
	public AccountRowMapper accountRowMapper(){
		return new AccountRowMapper();
	}

}
